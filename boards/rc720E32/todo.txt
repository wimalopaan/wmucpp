ToDo
====

Hardware
--------
* HW_01:
** bridge 1:
** bridge 2:
** bridge 3:
* HW_02:
* HW_03:
** remove button
** use H523 with floating-point support

General
------
* Flash-Layout (https://community.st.com/t5/stm32-mcus-embedded-software/procedures-for-developing-an-stm32-bootloader-app/td-p/382076)
** 1) Page 0: Jump-main + EEProm
** 2) Page 1...: main()

Bugs
----

Ideas
-----
* SBUS2 (32 channels): https://github.com/iNavFlight/inav/pull/10270

Prio 0
------
* use std::variant<> instead of heap-allocated wrapper objects
* support addressable LEDs (WS1812, APA102) (use timer/dma)
** ws2812B
** switch color protocol (setRGB)
* add s.port master
* telemetry transfor from s.port-masters to s.port-aux and to crsf-telemetry
* crsf relay for ELRS-relay (from rcDesk32)
* EByte E32-170T30D relay mode
* SumDv3: option to swap ch1-16 and ch17-32
* support addressable LEDs like WS1812 / APA102 (as multiswitch)
* add mcp23017 / TLC59108(F) support for switch output
* add SBus-out on servo/esc outputs
* for SBus-out: selectable range: 1-16 or 17-32 (requires crsfch.lua on radio)
* set pole pairs via menu for rpm (esc 1 and 2)
* report esc1/2 temperature
* "normal" servo support: needs major refactor of input management
* fix changing uart baud rate if inactive (bluetooth)
* Refactoring:
** extract CRSF-command handling to namespace CRSF::Util
** unify SET/SET4/SET4M/SET64 and ArduPilot-tunneling
** general state-machine:
*** introduce sub-states
*** e.g. subdevide states "RunConnected" or "RunDisconnected" into main-state with common actions
* telemetry temp. off -> LED blink code -> substate
* CRSF-HD on ESC-Out (maybe also CRSF-FD: ESC/Tlm)
* I2C bus: implement bus arbiter (time slot based)
* use only one appid for tunneling packages to one widget
** appid 6000 -> Schottel
** appid 6010 -> MultiSwitch
* watchdog
* use additional CRC in command frames as describe by TBS
* correct packaging of ArduPilot frames
* crsf refactor II
** make chunking optional
** make telemetry slot optional
** parameter: underlying type (Bytes: 1, 2, 4)
* use units in crsf-parameters
* Escape32/Ascii: get fw version
* Coordinate system: rotate pi/2 left (mathematical 0 as head) : help-text?
* mode: cruise-controller -> channel-passthru
* esc-mode forward or forward/backward
* LUA: alarm3 test from crsf-menu
* VEsc: slew-rate for throttle (crsf parameter)
* modes: Dual-Schottel, Passthru
* make dma, timer, usart summary with hw-connections
* crsf-command popups: useful texts

Prio 1
------
* implement SBus-Switch state input (like super-simple-multiswitch)
* maybe F9P support: yaw from GPS (moving baseline)
* GPS: RTCM messages (how to send them over ELRS???)

Prio 2
------
* HOTT-Telemetrie
* IBus-Telemetrie

Prio 3
------

not needed anymore
------------------
* send device info packet multiple times
<- ELRS 3.5.5. prioritises config proto messages (for 10s)
<- disabling telemetry when getting config proto messages (for 30s)

Done bugs:
----------
* after rx unconnect, no return to state connected

Done:
------
* add exti-slave on fb1,tlm1 and fb2,tlm2 (to duplicate sbus on esc1,esc2)
* add sbus on esc1, esc2
* bluetooth on servo connector
* use "acceptable" magnetometer scalings in eeprom
* gps: bidirectional, send config messages to module (e.g. frequency of messages and which messages e.g. 0x01/0x04 to get HDOP, see edgetx/gps
** for NMEA messages send e.g. $PUBX,40,RMC messages to disable
* send telemetry values also to bluetooth (display on RoboRemo)
** use fixed roboremo names, activate via menu
** voltage threshold -> roboremo alarm/item
* BlueTooth/Aux <- RoboRemo (simple HC-05 connect or via BLE-Adapter), selectable baudrate (9600/115200)
* auto-off compass calib mode (15s)
* CRSF-telemetry: Attitude (yaw, roll, pitch), GPS (heading over ground)
* Display compass calibration data
* calibration of QMC5883L data (normalize) -> LED blink code
* tilt compensation via accelometer (mpu6050)
* disable telemetry if config-protocol command issued for 30secs
* gps: altitude
* S.Port @ AUX Telemetry (ESC, Servos, ...)
* S.Port / SBus @ AUX -> CRSF Relay (Switch / Channels)
* I2C
** QMC5883L
* GPS: adaption of protocol-parser to dma-pattern
** velocity -> Telemetry
* disable/enable Schottel-computations via menu -> general CruiseController
* S.Port / SBus @ Aux (via Software-UART)
* implement CRSF_SUBCMD_SWITCH_SET4
* understand switch command
* time-multiplex switch-encoder
* info-packet: show RC720 fw version
* Escape32
** remove parameters that do no fit into crsf U8/I8
** make them uint8_t and crsf:U8/I8
** this was not saving substantial RAM space and has multiple complications
* crsf refactor I
* send hw/fw version to radio (different frame types, slower rate)
* LUA: option L/R data swap
* LUA: display fw of servo on Widget (different frames)
* Null-Posisition after power-up
* LUA: Reset button position (bug in EdgeTx)
* UART refactor
** use PA
** idle: bytes to PA
** usart.h: sendBuffer/receiver: diffent sizes possible
** unify send/receive buffers for mutual-exclusiv protocols
* V/ESC: half-duplex protocol, adaption to dma-pattern
* PWM-Null einstellbar
* ESCape32-Ascii: config-protocol
* seperate channel-update from crsf-relay
* baudrate switch
* CRSF direct-mode: use ELRSBuddy without TX(RX) <-> RX
** wait for link-stats packages
** if no link stats, switch to direct mode (spontaneous 0x29 info messages and 0x2B parameter)
** start-byte: 0xEA
** dest: 0xEA (handset)
** src: 0xEE (TX-module)
* SBus, IBus, Hott-Input (together with CRSF-config)
* channel-update: periodic instead of crsf-triggered, because CRSF isn't the one-and-only input anymore
* make tunneling crsf packets valid extended packets (modify also LUA)
* useful LED blink patterns
* CRSF chunking of parameter-settings-entry due to huge setting lists
* CPPM-Input (8/9 channels) and channel-overlay-input (blauzahn: 10Âµs gap; 20ms period)
** requires: channel-input mapper (sources: crsf, cppm, sbus/ibus, ...)
